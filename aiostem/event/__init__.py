from aiostem.message import Message
from aiostem.reply.base import Event, UnknownEvent

from .hsdesc import HsDescContentEvent, HsDescEvent
from .network import DisconnectEvent, NetworkLivenessEvent
from .signal import SignalEvent
from .status import StatusClientEvent, StatusGeneralEvent, StatusServerEvent

EVENT_MAP: dict[str, type[Event]] = {
    'DISCONNECT': DisconnectEvent,
    'HS_DESC': HsDescEvent,
    'HS_DESC_CONTENT': HsDescContentEvent,
    'NETWORK_LIVENESS': NetworkLivenessEvent,
    'SIGNAL': SignalEvent,
    'STATUS_CLIENT': StatusClientEvent,
    'STATUS_GENERAL': StatusGeneralEvent,
    'STATUS_SERVER': StatusServerEvent,
}

# The following events are fake and only generated by Aiostem.
EVENTS_INTERNAL: set[str] = {
    'DISCONNECT',
}


def event_parser(message: Message) -> Event:
    """Find the appropriate event class to parse this message."""
    if message.event_type is not None:
        parser = EVENT_MAP.get(message.event_type, UnknownEvent)
    else:
        parser = UnknownEvent
    return parser(message)


__all__ = [
    'DisconnectEvent',
    'EVENTS_INTERNAL',
    'EVENT_MAP',
    'Event',
    'HsDescContentEvent',
    'HsDescEvent',
    'NetworkLivenessEvent',
    'SignalEvent',
    'event_parser',
]
