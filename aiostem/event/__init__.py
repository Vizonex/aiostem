from typing import Dict, List, Set, Type

from aiostem.event.hsdesc import HsDescContentEvent, HsDescEvent
from aiostem.event.network import DisconnectEvent, NetworkLivenessEvent
from aiostem.event.signal import SignalEvent
from aiostem.event.status import StatusClientEvent, StatusGeneralEvent, StatusServerEvent
from aiostem.message import Message
from aiostem.response.base import Event, UnknownEvent

EVENT_MAP: Dict[str, Type[Event]] = {
    'DISCONNECT': DisconnectEvent,
    'HS_DESC': HsDescEvent,
    'HS_DESC_CONTENT': HsDescContentEvent,
    'NETWORK_LIVENESS': NetworkLivenessEvent,
    'SIGNAL': SignalEvent,
    'STATUS_CLIENT': StatusClientEvent,
    'STATUS_GENERAL': StatusGeneralEvent,
    'STATUS_SERVER': StatusServerEvent,
}

# The following events are fake and only generated by Aiostem.
EVENTS_INTERNAL: Set[str] = {
    'DISCONNECT',
}


def event_parser(message: Message) -> Event:
    """Find the appropriate event class to parse this message."""
    parser = EVENT_MAP.get(message.event_type, UnknownEvent)
    return parser(message)


__all__: List[str] = [
    'DisconnectEvent',
    'EVENTS_INTERNAL',
    'EVENT_MAP',
    'Event',
    'HsDescContentEvent',
    'HsDescEvent',
    'NetworkLivenessEvent',
    'SignalEvent',
    'event_parser',
]
